name: Build

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write

env:
    SAMPLE_EXE_NAME: pm-sample.exe

jobs:
  refactor-and-analyze:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: Extract changed files
      id: changed
      run: |
        git fetch origin ${{ github.base_ref }} --depth=1
        echo "FILES_CHANGED=`                                                               \
          (git diff --name-only --diff-filter=AM ${{ github.base_ref }} HEAD 2> /dev/null)  \
          | grep -E "^.*\.(c|h|cpp|hpp)"                                                    \
          | sed -z "s/\n/ /g"                                                               \
        `" >> $GITHUB_OUTPUT

    - uses: actions/setup-python@v4
      if: ${{ steps.changed.outputs.FILES_CHANGED != null }}
      with:
        python-version: '3.11'

    - name: Install tools
      if: ${{ steps.changed.outputs.FILES_CHANGED != null }}
      run: |
        sudo apt-get update
        sudo apt-get install clang-format
        pip install lizard

    - name: Refactor
      if: ${{ steps.changed.outputs.FILES_CHANGED != null }}
      run: |
        clang-format -i -style=file:.clang-format ${{ steps.changes.outputs.FILES_CHANGED }}
        git config --global user.email "action@github.com"
        git config --global user.name "action"
        git add .
        (git commit -m "Refactor by Github Actions" && git push origin HEAD) || expr 1 > /dev/null

    - name: Analyze
      if: ${{ steps.changed.outputs.FILES_CHANGED != null }}
      run: |
        echo "::add-matcher::.github/lizard.json"
        lizard -l -cpp -w ${{ steps.changed.outputs.FILES_CHANGED != null }}
  

  build-windows:
    needs: refactor-and-analyze
    strategy:
      matrix:
        arch: [x86, x64]
        variants: [debug, release]

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup
      uses: ilammy/msvc-dev-cmd@v1.12.1
      with:
        arch: ${{ matrix.arch }}

    - name: Build library
      run: |
        cmake --preset ${{ matrix.arch }}-${{ matrix.variants }}-win
        cmake --build out/build/${{ matrix.arch }}-${{ matrix.variants }}-win
        cmake --install out/build/${{ matrix.arch }}-${{ matrix.variants }}-win

    - name: Build sample
      working-directory: sample
      run: |
        .\build.bat ${{ matrix.arch }} ${{ matrix.variants }}
        dir .\build\${{ matrix.arch }}-${{ matrix.variants }}-win\${{ env.SAMPLE_EXE_NAME }} > $null 2>&1


  build-linux:
    needs: refactor-and-analyze
    strategy:
      matrix:
        arch: [x86, x64]
        variants: [debug, release]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
  
    - name: Setup
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build
        if [ "${{ matrix.arch}}" == "x86" ]; then
          sudo apt-get install gcc-mingw-w64-i686-win32
        else
          sudo apt-get install gcc-mingw-w64-x86-64-win32
        fi

    - name: Build library
      run: |
        cmake --preset ${{ matrix.arch }}-${{ matrix.variants }}-linux
        cmake --build out/build/${{ matrix.arch }}-${{ matrix.variants }}-linux
        cmake --install out/build/${{ matrix.arch }}-${{ matrix.variants }}-linux

    - name: Build sample
      working-directory: sample
      run: |
        ./build.sh ${{ matrix.arch }} ${{ matrix.variants }}
        find ./build/${{ matrix.arch }}-${{ matrix.variants }}-linux/${{ env.SAMPLE_EXE_NAME }} &> /dev/null
